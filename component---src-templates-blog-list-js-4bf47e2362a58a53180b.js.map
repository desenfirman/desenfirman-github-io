{"version":3,"sources":["webpack:///./src/components/Layout/ContentLayout.js","webpack:///./src/components/SEO.js","webpack:///./src/templates/blog-list.js"],"names":["ContentLayout","render","this","props","breadcrumb_items","children","md","lg","className","Component","SEO","title","description","image","pathname","article","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","googleAnalyticsTrackingId","seo","url","name","content","async","src","BlogIndex","posts","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","prefix_page","isFirst","isLast","prevPage","toString","nextPage","link","tag","map","node","frontmatter","fields","slug","key","fluid","style","marginBottom","marginTop","date","to","readingTime","text","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","React","pageQuery"],"mappings":"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","file":"component---src-templates-blog-list-js-4bf47e2362a58a53180b.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport {CoreLayout as Layout} from './CoreLayout'\nimport SideBar from '../Sidebar'\nimport BreadcrumbNav from '../BreadcrumbNav'\nimport PageFooter from '../PageFooter'\n\n\nclass ContentLayout extends Component {\n    render() {\n        const {breadcrumb_items, children} = this.props\n        return (\n            <Layout>\n                <SideBar/>\n                <Container >\n                    <Row>\n                        <Col md={10} lg={8} className={'offset-md-1 offset-lg-2'}>\n                            <Container>\n                                <BreadcrumbNav breadcrumb_items={breadcrumb_items} />\n                                <Row>\n                                    {children}\n                                </Row>\n                            </Container>\n                        </Col>\n                    </Row>\n                </Container>\n\n                <PageFooter />\n\n            </Layout>\n        )\n    }\n}\n\nContentLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport { ContentLayout }","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { graphql, StaticQuery } from 'gatsby';\n// import Twitter from './Twitter';\n// import Facebook from './Facebook';\n\nconst SEO = ({\n  title = null,\n  description = null,\n  image = null,\n  pathname = null,\n  article = false,\n}) => (\n  <StaticQuery\n    query={graphql`\n      query SEOQuery {\n        site {\n          siteMetadata {\n            defaultTitle: title\n            titleTemplate\n            defaultDescription: description\n            siteUrl: url\n            defaultImage: image\n            googleAnalyticsTrackingId\n          }\n        }\n      }\n    `}\n    render={({\n      site: {\n        siteMetadata: {\n          defaultTitle,\n          titleTemplate,\n          defaultDescription,\n          siteUrl,\n          defaultImage,\n          googleAnalyticsTrackingId\n        },\n      },\n    }) => {\n      const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${image || defaultImage}`,\n        url: `${siteUrl}${pathname || '/'}`,\n        googleAnalyticsTrackingId: googleAnalyticsTrackingId\n      };\n\n      return (\n        <>\n          <Helmet title={seo.title} titleTemplate={titleTemplate}>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            <script async src={`https://www.googletagmanager.com/gtag/js?id=` + googleAnalyticsTrackingId}></script>\n              \n              <script>\n                {`\n                  window.dataLayer = window.dataLayer || [];\n                  function gtag(){dataLayer.push(arguments);}\n                  gtag('js', new Date());\n                  gtag('config', '` + googleAnalyticsTrackingId + `');\n                `} \n              </script>\n          </Helmet>\n        </>\n      );\n    }}\n  />\n);\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nexport default SEO;\n","import React from 'react'\n\nimport { ContentLayout as Layout } from '../components/Layout/ContentLayout'\nimport { Link, graphql } from 'gatsby'\nimport { Divider, HLine } from '../components/HLine'\nimport SEO from '../components/SEO'\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\n\nclass BlogIndex extends React.Component {\n\n  render() {\n    const { data } = this.props\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages, prefix_page } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? prefix_page + '/' : prefix_page + '/' + (currentPage - 1).toString()\n    const nextPage = prefix_page + '/' + (currentPage + 1).toString()\n    return (\n      <Layout breadcrumb_items={[\n        {link: prefix_page, name: 'Blog'},\n      ]}>\n        <SEO title={'Blog'} />\n        <Container>\n          {\n            (this.props.pageContext.tag) ? \n              <><h5>List of posts by tag: {this.props.pageContext.tag}</h5><HLine/></>\n            : <></>\n          }\n          {/* START of Post List */}\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug\n            return (\n              <Row key={node.fields.slug}>\n                <Container fluid={true} style={{ marginBottom: '1em', marginTop: '1em' }}>\n                  <p className={'time'}>Written on <time>{node.frontmatter.date}</time></p>\n                  <h1 >\n                    <Link to={node.fields.slug}>\n                      {title}\n                    </Link>\n                  </h1>\n                  <p className=\"rd-t\">{node.fields.readingTime.text}</p>\n                  <p className={'text-body'} style={{ marginTop: '0.75em' }} dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n                  <Col className={'d-flex justify-content-end'}>\n                    <Link className={'btn btn-link float-right'} to={node.fields.slug}>Keep Reading</Link>\n                  </Col>\n                </Container>\n                <Divider />\n              </Row>\n            )\n          })}\n          {/* END of Post List */}\n\n          {/* START of Pagination */}\n          <HLine />\n          <ul\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              listStyle: 'none',\n              padding: 0,\n            }}\n          >\n            {!isFirst && (\n              <Link className={\"btn btn-link\"} to={prevPage} rel=\"prev\">Â« Previous Page</Link>\n            )}\n            {Array.from({ length: numPages }, (_, i) => (\n              <li\n                key={`pagination-number${i + 1}`}\n                style={{\n                  margin: 0,\n                }}\n              >\n                <Link className={\"btn btn-link \" + (i + 1 === currentPage ? 'disabled' : '')}\n                  to={`blog/` + ((i === 0) ? '' : i + 1)}\n                >\n                  {i + 1}\n                </Link>\n              </li>\n            ))}\n            {!isLast && (\n              <Link className={\"btn btn-link\"} to={nextPage} rel=\"next\">Next Page Â»</Link>\n            )}\n          </ul>\n          <HLine />\n          {/* END of Pagination */}\n        </Container>\n\n\n      </Layout>\n\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQueryWithTag($skip: Int!, $limit: Int!, $tag: String = \"*\") {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { frontmatter: { tags: { glob: $tag } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 280)\n          fields {\n            slug\n            readingTime{\n              text\n            }\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}