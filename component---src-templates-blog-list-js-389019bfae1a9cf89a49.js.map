{"version":3,"sources":["webpack:///./src/templates/blog-list.js"],"names":["BlogIndex","render","posts","this","props","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","prefix_page","isFirst","isLast","prevPage","toString","nextPage","breadcrumb_items","link","name","title","tag","map","node","frontmatter","fields","slug","key","fluid","style","marginBottom","marginTop","className","date","readingTime","text","to","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","React","Component","pageQuery"],"mappings":"sSAWMA,E,gLAEJC,OAAA,WAAU,IAEFC,EADWC,KAAKC,MAAdC,KACWC,kBAAkBC,MAF9B,EAGwCJ,KAAKC,MAAMI,YAAlDC,EAHD,EAGCA,YAAaC,EAHd,EAGcA,SAAUC,EAHxB,EAGwBA,YACzBC,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBC,EACzBI,EAAWL,EAAc,GAAM,EAAIE,EAAc,IAAMA,EAAc,KAAOF,EAAc,GAAGM,WAC7FC,EAAWL,EAAc,KAAOF,EAAc,GAAGM,WACvD,OACE,kBAAC,IAAD,CAAQE,iBAAkB,CACxB,CAACC,KAAMP,EAAaQ,KAAM,UAE1B,kBAAC,IAAD,CAAKC,MAAO,SACZ,kBAAC,IAAD,KAEKjB,KAAKC,MAAMI,YAAYa,IACtB,oCAAE,qDAA2BlB,KAAKC,MAAMI,YAAYa,KAAS,kBAAC,IAAD,OAC7D,qCAGHnB,EAAMoB,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNH,EAAQG,EAAKC,YAAYJ,OAASG,EAAKE,OAAOC,KACpD,OACE,kBAAC,IAAD,CAAKC,IAAKJ,EAAKE,OAAOC,MACpB,kBAAC,IAAD,CAAWE,OAAO,EAAMC,MAAO,CAAEC,aAAc,MAAOC,UAAW,QAC/D,uBAAGC,UAAW,QAAd,cAAiC,8BAAOT,EAAKC,YAAYS,OACzD,uBAAGD,UAAU,QAAQT,EAAKE,OAAOS,YAAYC,MAC7C,4BACE,kBAAC,OAAD,CAAMC,GAAIb,EAAKE,OAAOC,MACnBN,IAGL,uBAAGY,UAAW,YAAaH,MAAO,CAAEE,UAAW,UAAYM,wBAAyB,CAAEC,OAAQf,EAAKgB,WACnG,kBAAC,IAAD,CAAKP,UAAW,8BACd,kBAAC,OAAD,CAAMA,UAAW,2BAA4BI,GAAIb,EAAKE,OAAOC,MAA7D,kBAGJ,kBAAC,IAAD,UAON,kBAAC,IAAD,MACA,wBACEG,MAAO,CACLW,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACXC,QAAS,KAGTjC,GACA,kBAAC,OAAD,CAAMoB,UAAW,eAAgBI,GAAItB,EAAUgC,IAAI,QAAnD,mBAEDC,MAAMC,KAAK,CAAEC,OAAQvC,IAAY,SAACwC,EAAGC,GAAJ,OAChC,wBACExB,IAAG,qBAAsBwB,EAAI,GAC7BtB,MAAO,CACLuB,OAAQ,IAGV,kBAAC,OAAD,CAAMpB,UAAW,iBAAmBmB,EAAI,IAAM1C,EAAc,WAAa,IACvE2B,GAAI,SAAkB,IAANe,EAAW,GAAKA,EAAI,IAEnCA,EAAI,QAITtC,GACA,kBAAC,OAAD,CAAMmB,UAAW,eAAgBI,GAAIpB,EAAU8B,IAAI,QAAnD,gBAGJ,kBAAC,IAAD,S,GA9EcO,IAAMC,WAyFftD,YAER,IAAMuD,EAAS","file":"component---src-templates-blog-list-js-389019bfae1a9cf89a49.js","sourcesContent":["import React from 'react'\n\nimport { ContentLayout as Layout } from '../components/Layout/ContentLayout'\nimport { Link, graphql } from 'gatsby'\nimport { Divider, HLine } from '../components/HLine'\nimport SEO from '../components/SEO'\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\n\n\nclass BlogIndex extends React.Component {\n\n  render() {\n    const { data } = this.props\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages, prefix_page } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? prefix_page + '/' : prefix_page + '/' + (currentPage - 1).toString()\n    const nextPage = prefix_page + '/' + (currentPage + 1).toString()\n    return (\n      <Layout breadcrumb_items={[\n        {link: prefix_page, name: 'Blog'},\n      ]}>\n        <SEO title={'Blog'} />\n        <Container>\n          {\n            (this.props.pageContext.tag) ? \n              <><h5>List of posts by tag: {this.props.pageContext.tag}</h5><HLine/></>\n            : <></>\n          }\n          {/* START of Post List */}\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug\n            return (\n              <Row key={node.fields.slug}>\n                <Container fluid={true} style={{ marginBottom: '1em', marginTop: '1em' }}>\n                  <p className={'time'}>Written on <time>{node.frontmatter.date}</time></p>\n                  <p className=\"rd-t\">{node.fields.readingTime.text}</p>\n                  <h1 >\n                    <Link to={node.fields.slug}>\n                      {title}\n                    </Link>\n                  </h1>\n                  <p className={'text-body'} style={{ marginTop: '0.75em' }} dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n                  <Col className={'d-flex justify-content-end'}>\n                    <Link className={'btn btn-link float-right'} to={node.fields.slug}>Keep Reading</Link>\n                  </Col>\n                </Container>\n                <Divider />\n              </Row>\n            )\n          })}\n          {/* END of Post List */}\n\n          {/* START of Pagination */}\n          <HLine />\n          <ul\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              listStyle: 'none',\n              padding: 0,\n            }}\n          >\n            {!isFirst && (\n              <Link className={\"btn btn-link\"} to={prevPage} rel=\"prev\">« Previous Page</Link>\n            )}\n            {Array.from({ length: numPages }, (_, i) => (\n              <li\n                key={`pagination-number${i + 1}`}\n                style={{\n                  margin: 0,\n                }}\n              >\n                <Link className={\"btn btn-link \" + (i + 1 === currentPage ? 'disabled' : '')}\n                  to={`blog/` + ((i === 0) ? '' : i + 1)}\n                >\n                  {i + 1}\n                </Link>\n              </li>\n            ))}\n            {!isLast && (\n              <Link className={\"btn btn-link\"} to={nextPage} rel=\"next\">Next Page »</Link>\n            )}\n          </ul>\n          <HLine />\n          {/* END of Pagination */}\n        </Container>\n\n\n      </Layout>\n\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQueryWithTag($skip: Int!, $limit: Int!, $tag: String = \"*\") {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { frontmatter: { tags: { glob: $tag } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 280)\n          fields {\n            slug\n            readingTime{\n              text\n            }\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}