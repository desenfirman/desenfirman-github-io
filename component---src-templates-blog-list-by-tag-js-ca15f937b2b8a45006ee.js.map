{"version":3,"sources":["webpack:///./src/components/Layout/ContentLayout.js","webpack:///./src/components/SEO.js","webpack:///./src/templates/blog-list-by-tag.js"],"names":["ContentLayout","render","this","props","breadcrumb_items","children","md","lg","className","Component","SEO","title","description","image","pathname","article","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","googleAnalyticsTrackingId","seo","url","name","content","async","src","BlogIndex","posts","data","allMarkdownRemark","edges","pageContext","currentPage","numPages","prefix_page","isFirst","isLast","prevPage","toString","nextPage","link","tag","map","node","frontmatter","fields","slug","key","fluid","style","marginBottom","marginTop","date","to","readingTime","text","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","React","pageQuery"],"mappings":"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","file":"component---src-templates-blog-list-by-tag-js-ca15f937b2b8a45006ee.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport {CoreLayout as Layout} from './CoreLayout'\nimport SideBar from '../Sidebar'\nimport BreadcrumbNav from '../BreadcrumbNav'\nimport PageFooter from '../PageFooter'\n\n\nclass ContentLayout extends Component {\n    render() {\n        const {breadcrumb_items, children} = this.props\n        return (\n            <Layout>\n                <SideBar/>\n                <Container >\n                    <Row>\n                        <Col md={10} lg={8} className={'offset-md-1 offset-lg-2'}>\n                            <Container>\n                                <BreadcrumbNav breadcrumb_items={breadcrumb_items} />\n                                <Row>\n                                    {children}\n                                </Row>\n                            </Container>\n                        </Col>\n                    </Row>\n                </Container>\n\n                <PageFooter />\n\n            </Layout>\n        )\n    }\n}\n\nContentLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport { ContentLayout }","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { graphql, StaticQuery } from 'gatsby';\n// import Twitter from './Twitter';\n// import Facebook from './Facebook';\n\nconst SEO = ({\n  title = null,\n  description = null,\n  image = null,\n  pathname = null,\n  article = false,\n}) => (\n  <StaticQuery\n    query={graphql`\n      query SEOQuery {\n        site {\n          siteMetadata {\n            defaultTitle: title\n            titleTemplate\n            defaultDescription: description\n            siteUrl: url\n            defaultImage: image\n            googleAnalyticsTrackingId\n          }\n        }\n      }\n    `}\n    render={({\n      site: {\n        siteMetadata: {\n          defaultTitle,\n          titleTemplate,\n          defaultDescription,\n          siteUrl,\n          defaultImage,\n          googleAnalyticsTrackingId\n        },\n      },\n    }) => {\n      const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${image || defaultImage}`,\n        url: `${siteUrl}${pathname || '/'}`,\n        googleAnalyticsTrackingId: googleAnalyticsTrackingId\n      };\n\n      return (\n        <>\n          <Helmet title={seo.title} titleTemplate={titleTemplate}>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            <script async src={`https://www.googletagmanager.com/gtag/js?id=` + googleAnalyticsTrackingId}></script>\n              \n              <script>\n                {`\n                  window.dataLayer = window.dataLayer || [];\n                  function gtag(){dataLayer.push(arguments);}\n                  gtag('js', new Date());\n                  gtag('config', '` + googleAnalyticsTrackingId + `');\n                `} \n              </script>\n          </Helmet>\n        </>\n      );\n    }}\n  />\n);\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nexport default SEO;\n","import React from 'react';\n\nimport { ContentLayout as Layout } from '../components/Layout/ContentLayout';\nimport { Link, graphql } from 'gatsby';\nimport { Divider, HLine } from '../components/HLine';\nimport SEO from '../components/SEO';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props;\n    const posts = data.allMarkdownRemark.edges;\n    const { currentPage, numPages, prefix_page } = this.props.pageContext;\n    const isFirst = currentPage === 1;\n    const isLast = currentPage === numPages;\n    const prevPage =\n      currentPage - 1 === 1\n        ? prefix_page + '/'\n        : prefix_page + '/' + (currentPage - 1).toString();\n    const nextPage = prefix_page + '/' + (currentPage + 1).toString();\n    return (\n      <Layout breadcrumb_items={[{ link: prefix_page, name: 'Blog' }]}>\n        <SEO title={'Blog'} />\n        <Container>\n          {\n            <>\n              <h5>List of posts by tag: {this.props.pageContext.tag}</h5>\n              <HLine />\n            </>\n          }\n          {/* START of Post List */}\n          {posts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug;\n            return (\n              <Row key={node.fields.slug}>\n                <Container\n                  fluid={true}\n                  style={{ marginBottom: '1em', marginTop: '1em' }}\n                >\n                  <p className={'time'}>\n                    Written on <time>{node.frontmatter.date}</time>\n                  </p>\n                  <h1>\n                    <Link to={node.fields.slug}>{title}</Link>\n                  </h1>\n                  <p className=\"rd-t\">{node.fields.readingTime.text}</p>\n                  <p\n                    className={'text-body'}\n                    style={{ marginTop: '0.75em' }}\n                    dangerouslySetInnerHTML={{ __html: node.excerpt }}\n                  />\n                  <Col className={'d-flex justify-content-end'}>\n                    <Link\n                      className={'btn btn-link float-right'}\n                      to={node.fields.slug}\n                    >\n                      Keep Reading\n                    </Link>\n                  </Col>\n                </Container>\n                <Divider />\n              </Row>\n            );\n          })}\n          {/* END of Post List */}\n\n          {/* START of Pagination */}\n          <HLine />\n          <ul\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              listStyle: 'none',\n              padding: 0,\n            }}\n          >\n            {!isFirst && (\n              <Link className={'btn btn-link'} to={prevPage} rel=\"prev\">\n                Â« Previous Page\n              </Link>\n            )}\n            {Array.from({ length: numPages }, (_, i) => (\n              <li\n                key={`pagination-number${i + 1}`}\n                style={{\n                  margin: 0,\n                }}\n              >\n                <Link\n                  className={\n                    'btn btn-link ' + (i + 1 === currentPage ? 'disabled' : '')\n                  }\n                  to={`/blog/` + (i === 0 ? '' : i + 1)}\n                >\n                  {i + 1}\n                </Link>\n              </li>\n            ))}\n            {!isLast && (\n              <Link className={'btn btn-link'} to={nextPage} rel=\"next\">\n                Next Page Â»\n              </Link>\n            )}\n          </ul>\n          <HLine />\n          {/* END of Pagination */}\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query blogPageQueryWithTag($skip: Int!, $limit: Int!, $tag: String = \"*\") {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { frontmatter: { tags: { glob: $tag } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 280)\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}