{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019-12-02-From-Jekyll-to-GatsbyJS/","result":{"data":{"site":{"siteMetadata":{"title":"Dese Narfa Firmansyah · Back End Devs & Artificial Intelligence Enthusiast","disqusShortname":"desenfirman"}},"markdownRemark":{"id":"0d6f06f4-78cc-5e20-a222-ed87c5681305","excerpt":"Jujur saja, dulu punya rencana untuk migrasi dari Jekyll ke framework static web generator yang lain. Alasannya? ya karena emang iseng ingin mencoba hal baru…","html":"<p>Jujur saja, dulu punya rencana untuk migrasi dari Jekyll ke <em>framework static web generator</em> yang lain. Alasannya? ya karena emang iseng ingin mencoba hal baru (hehe). Tapi gak jadi-jadi karena awalnya mengira bahwa <a href=\"https://pages.github.com\">Github Pages</a> hanya dapat menerima konten dari Jekyll. Waktu mencoba cari tahu info di salah satu komunitas <em>dev</em>, ternyata Github Pages dapat menerima konten selain dari Jekyll. Setelah tahu itu, kemudian nyari-nyari <em>static web generator</em> yang lain. Dan akhirnya, berjumpalah saya dengan GatsbyJS.</p>\n<p><figure class=\"figure\"><img src=\"https://i.imgur.com/Gkt2mxW.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">Bukan, yang jelas bukan Gatsby yang ini wkwk</figcaption></figure></p>\n<p>GatsbyJS ini adalah framework turunan ReactJS yang memang dikhususkan sebagai <em>static web generator</em>. Jika Jekyll menggunakan bahasa pemrograman Ruby on Rails sebagai <em>base language</em> untuk <em>compiling</em> <em>page</em>-nya, maka Gatsby menggunakan bahasa Node JS untuk melakukan <em>compiling</em> halaman per halaman. Karena turunan langsung dari React, maka Gatsby juga secara tidak langsung memanfaatkan teknologi <em>progressive web apps</em>-nya milik ReactJS. Kapan lagi cuy? punya blog dengan rasa <em>progressive web apps</em>, wkwk.</p>\n<p><figure class=\"figure\"><img src=\"https://i.imgur.com/4MYxzK7.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">Nah, ini Gatsby yang bener</figcaption></figure></p>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#motivasi\">Motivasi</a></li>\n<li><a href=\"#first-things-first\">First things first</a></li>\n<li><a href=\"#bagaimana-halaman-per-post-ditampilkan\">Bagaimana halaman per post ditampilkan?</a></li>\n<li><a href=\"#basic-graphql-queries\">Basic GraphQL queries</a></li>\n<li><a href=\"#deployment\">Deployment</a></li>\n</ul>\n</div>\n<h2 id=\"motivasi\"><a href=\"#motivasi\" aria-label=\"motivasi permalink\" class=\"anchor\"><span style=\"padding-left: 1rem;\">#</span></a>Motivasi</h2>\n<p>Penulis sebenarnya juga kurang begitu mencoba mengamati dan menganalisis secara detail bagaimana perbandingan performa antara GatsbyJS dan Jekyll. Secara fungsional, keduanya sama-sama <em>static-web generator</em> yang berarti web bisa berjalan dan mengambil data tanpa perlu melakukan koneksi ke <em>database server</em>. Pengguna cuma tinggal <em>deploy</em>, proses <em>compile</em> dilakukan dan kemudian data halaman untuk masing-masing <em>post</em> akan disimpan di layanan <em>web-hosting</em> berbasis <em>storage</em> (dalam hal ini GitHub Pages). Namun ada beberapa dugaan awal yang menjadi motivasi awal kenapa melakukan migrasi dari Jekyll ke GatsbyJS.</p>\n<p>Salah satu alasannya yakni Gatsby JS ini turunan dari ReactJS dan harapannya dengan melakukan migrasi ke <em>framework</em> yang berbasis JavaScript ini, <em>blog</em> yang dihosting dapat secara dinamis berpindah dari halaman ke halaman dalam satu alamat (kebetulan setelah dicoba memang performa navigasinya jauh lebih mendingan dibanding menggunakan Jekyll, hehe).</p>\n<p>Alasan yang selanjutnya yaitu <em>trend framework</em> JavaScript (terutama React JS) mengalami peningkatan pengguna dibanding <em>framework</em> yang lain. Otomatis, pengguna yang makin banyak == banyaknya juga <em>library</em> yang mendukung framework React JS ini == fleksibilitas untuk mengembangkan web ini juga semakin bertambah.</p>\n<h2 id=\"first-things-first\"><a href=\"#first-things-first\" aria-label=\"first things first permalink\" class=\"anchor\"><span style=\"padding-left: 1rem;\">#</span></a>First things first</h2>\n<blockquote>\n<p>I have no idea what I should do</p>\n</blockquote>\n<p>Ya begitulah yang ada di pikiran saya waktu akan melakukan migrasi ke GatsbyJS. Jujur, saya tidak punya latar belakang menggunakan <em>framework</em> berjenis JavaScript (terutama ReactJS). Namun, saya mencoba untuk memahami bagaimana struktur dan teknik pengembangan web menggunakan GatsbyJS ini dengan menggunakan <em>template</em> yang sudah ada. Pilihan jatuh di salah satu <em>starter</em> bernama <a href=\"https://github.com/anubhavsrivastava/gatsby-starter-prologue\">gatsby-starter-prologue</a>.</p>\n<p><figure class=\"figure\"><img src=\"https://www.gatsbyjs.org/static/97a842a5083dff756f4b0f7d2bfaea2c/7b604/924eddb2c97546a79fec05bea8576b65.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">gatsby-starter-prologue: sangat beda sekali dengan web ini, wkwk</figcaption></figure></p>\n<p>Berkat template ini, saya banyak memahami istilah-istilah mulai dari <em>Component</em>, <em>State</em>, <em>React Lifecycle</em> serta bagaimana cara mengorganisir tiap <em>React Component</em> pada sebuah <em>project</em>. Dan mungkin inilah yang paling saya suka dari web yang berbasis ReactJS. Sebuah web dipecah menjadi beberapa komponen dan tiap komponen web memiliki direktori yang berbeda. Selain itu juga tiap komponen juga dapat langsung diaplikasikan sebuah <em>styling</em> (contohnya di component <em>Sidebar</em> ini misalnya). <em>Technically, better maintainability.</em></p>\n<p><figure class=\"figure\"><img src=\"https://i.imgur.com/kBScXEn.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">Yep, better maintainability</figcaption></figure></p>\n<p>Berikut ini adalah struktur umum <em>static web</em> berbasis GatsbyJS yang diambil dari <em>official default starter</em> khusus untuk <em>blog</em> (<a href=\"https://www.gatsbyjs.org/starters/gatsbyjs/gatsby-starter-blog/\">gatbsy-starter-blog</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">your-gatsby-project-name/\n└───content/\n|   └───blog/         # tempat meletakkan konten blog\n|   |   |   DD-MM-YY-Example-Post.md\n|   |   |   ......-.md\n|   |\n|   └───assets/       # asset dari konten blog\n|       |   ...-.jpg\n|       |   ...\n|\n└───src/\n|   └───components/   # tempat meletakkan komponen web (more likelyundefined pecahannya)\n|   |   |   header.js\n|   |   |   image.js\n|   |   |    ...-.js\n|   |\n|   └───pages/        # tempat khusus untuk halaman web yang ada\n|   |   |   404.js\n|   |   |   about-us.js\n|   |   |   ...-.js\n|   |\n|   └───templates/    # template untuk membuat halaman\n|   |   |   blog-post.js\n|   |   |   blog-list.js\n|   |   |   ...-.js\n|   |\n|   └─────utils/      # tempat meletakkan utilitas simpel yang mungkin membantu\n|       |   typography.js\n|       |   ...-.js\n|\n|   gatsby-browser.js # interface yang digunakan untuk komunikasi antara gatsby ke client browser\n|   gatsby-config.js  # konfigurasi utama gatsby dan tempat mendefinisikan package gatsby yang akan digunakan\n|   gatsby-node.js    # kode yang dijalankan pertama kali setiap proses building dilakukan\n|   gatsby-ssr.js     # kode untuk implementasi server-side rendering\n|   package.json      # konfigurasi project berbasis npm\n|   README.md</code></pre></div>\n<h2 id=\"bagaimana-halaman-per-post-ditampilkan\"><a href=\"#bagaimana-halaman-per-post-ditampilkan\" aria-label=\"bagaimana halaman per post ditampilkan permalink\" class=\"anchor\"><span style=\"padding-left: 1rem;\">#</span></a>Bagaimana halaman per post ditampilkan?</h2>\n<p>Jika pada Jekyll tiap halaman post akan di-<em>render</em> sesuai dengan <em>layout</em> yang sudah ditentukan dalam <em>format</em> YAML yang didefinisikan pada baris paling atas di <em>file</em> <em>Markdown</em>, maka pada GatsbyJS terdapat perbedaan dalam proses pembuatan halamannya.</p>\n<p>Pada GatsbyJS, tiap halaman akan dibuat <em>in programmatic ways</em> — begitulah jika merujuk ke dokumentasi GatsbyJS — pada sebuah <em>file</em> yang bernama <code class=\"language-text\">gatsby-node.js</code>. Dalam pembuatan halaman, diperlukan sebuah <em>template</em> yang dibuat dalam bentuk JSX Component. Selain itu juga, data <em>Markdown</em> dari sebuah post hanya dapat diakses menggunakan GraphQL, bahasa <em>query</em> utama dari GatsbyJS. Namun GraphQL disini hanya bersifat sebagai representasi data yang ada di project Gatsby mulai dari <em>blog</em> <em>post</em>, gambar dan <em>file</em>-<em>file</em> lainnya. Bbukan sebagai koneksi ke sebuah mesin database.</p>\n<p>Secara garis besar, untuk membuat halaman untuk masing-masing <em>post</em> dapat dilakukan dengan langkah-langkah berikut:</p>\n<ol>\n<li>Membuat halaman template khusus untuk <strong>masing-masing post</strong>.</li>\n<li>Membuat halaman template khusus untuk <strong>daftar postingan</strong> (sebagai <em>index</em> postingan tentunya).</li>\n<li>\n<p>Melakukan <strong>akses data</strong> postingan ke local GraphQL (sebagai <em>slug</em> atau alamat masing-masing <em>post</em>).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// File: src/gatsby-node.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    {\n      allMarkdownRemark(\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: 1000\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              tags\n            }\n          }\n        }\n          group(field: frontmatter___tags) {\n            fieldValue\n            totalCount\n          }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> result<span class=\"token punctuation\">.</span>errors\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Create blog posts pages.</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges\n  <span class=\"token function\">createPostPages</span><span class=\"token punctuation\">(</span>createPage<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Lakukan perulangan untuk tiap data postingan dan buat masing-masing halaman dengan perulangan tersebut menggunakan fungsi <code class=\"language-text\">createPage</code> pada <em>file</em> <code class=\"language-text\">gatbsy-node.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// File: src/gatsby-node.js</span>\n<span class=\"token comment\">// Create blog post list pages</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPostPages</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">createPage<span class=\"token punctuation\">,</span> posts<span class=\"token punctuation\">,</span> postsPerPage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> blogPost <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/blog-post.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// template untuk konten dari post</span>\n  posts<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> previous <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> posts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> posts<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>node\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> index <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> posts<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>node\n\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> blogPost<span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        slug<span class=\"token punctuation\">:</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n        previous<span class=\"token punctuation\">,</span>\n        next<span class=\"token punctuation\">,</span>\n        blog_prefix_page\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Create blog post list pages</span>\n  <span class=\"token keyword\">const</span> numPages <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> postsPerPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> numPages <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> blog_prefix_page <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">:</span> blog_prefix_page <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/blog-list.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// template untuk list dari post</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        limit<span class=\"token punctuation\">:</span> postsPerPage<span class=\"token punctuation\">,</span>\n        skip<span class=\"token punctuation\">:</span> i <span class=\"token operator\">*</span> postsPerPage<span class=\"token punctuation\">,</span>\n        numPages<span class=\"token punctuation\">,</span>\n        currentPage<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        prefix_page<span class=\"token punctuation\">:</span> blog_prefix_page<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<h2 id=\"basic-graphql-queries\"><a href=\"#basic-graphql-queries\" aria-label=\"basic graphql queries permalink\" class=\"anchor\"><span style=\"padding-left: 1rem;\">#</span></a>Basic GraphQL queries</h2>\n<p>Pada section sebelumnya, sempat disinggung mengenai akses data ke sebuah local GraphQL. Namun, akses data tersebut hanya sebatas proses memetakan alamat untuk masing-masing file <em>Markdown</em>. Selanjutnya, data alamat <em>Markdown</em> — atau disebut sebagai <em>slug</em> akan menjadi pemicu awal untuk mengakses data konten dari masing-masing <em>Markdown</em>, baik itu untuk file <code class=\"language-text\">blog-list.js</code> (daftar postingan) maupun <code class=\"language-text\">blog-post.js</code> (konten dari blog itu sendiri). Normalnya, sebuah <em>template</em> minimal terdapat <em>syntax</em> berikut untuk mengakses data pada GraphQL.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title,\n        disqusShortname\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD MMMM YYYY\")\n        tags\n      }\n      fields {\n        slug\n        readingTime{\n          text\n        }\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Ketika <em>syntax</em> GraphQL diatas telah didefinisikan di sebuah <em>template</em> JSX. Kalian dapat mengakses hasil dari <em>query</em> tersebut dalam bentuk <em>object</em> JavaScript dengan perintah berikut:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>markdownRemark</code></pre></div>\n<p>Data yang telah disimpan di variabel JS dapat langsung ditampilkan pada <em>method</em> <code class=\"language-text\">render()</code> atau juga dapat diolah terlebih dahulu sebelum ditampilkan.</p>\n<p>Untuk lengkapnya kalian dapat mengunjungi tautan berikut:</p>\n<blockquote>\n<p><a href=\"https://www.gatsbyjs.org/tutorial/part-seven/\">Programmatically create pages from data | Gatsby JS</a></p>\n</blockquote>\n<h2 id=\"deployment\"><a href=\"#deployment\" aria-label=\"deployment permalink\" class=\"anchor\"><span style=\"padding-left: 1rem;\">#</span></a>Deployment</h2>\n<p>Secara <em>default</em>, GatsbyJS telah menyediakan beberapa <em>task script</em> yang sudah didefinisikan pada <em>file</em> <code class=\"language-text\">package.json</code> — tempat konfigurasi dari <em>project</em> berbasis NPM. Beberapa diantaranya yaitu:</p>\n<ol>\n<li>develop: <code class=\"language-text\">gatsby develop</code></li>\n<li>build: <code class=\"language-text\">npm run clean &amp;&amp; gatsby build</code></li>\n<li>serve: <code class=\"language-text\">gatsby serve</code></li>\n<li>clean: <code class=\"language-text\">rimraf .cache public</code></li>\n<li>format: <code class=\"language-text\">prettier --write &#39;**/*.js&#39;</code></li>\n<li>test: <code class=\"language-text\">echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1</code></li>\n<li>deploy: <code class=\"language-text\">npm run clean &amp;&amp; gatsby build  &amp;&amp; gh-pages -d public -b master</code></li>\n</ol>\n<p>Proses <em>deployment</em> berjalan dengan melakukan <em>build</em> terlebih dahulu. Hasil proses <em>build</em> tersebut akan disimpan di direktori <code class=\"language-text\">public</code> sebelum dikirim ke repository Github Pages. Namun sebelum melakukan <em>deployment</em>, ada kalanya untuk menghapus bekas <em>deployment</em> dari Jekyll terlebih dahulu di <em>repository</em> GitHub Pages yang terkait.</p>\n<p><figure class=\"figure\"><img src=\"https://i.imgur.com/e64uav1.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">Yang terpenting adalah pastikan branch gh-pages dan bekas deployment Jekyll pada tab Environment telah dihapus sebelum deployment GatsbyJS dilakukan</figcaption></figure></p>\n<p>Setelah proses <em>cleaning</em> selesai, jalankan perintah <em>deploy</em> pada <em>file</em> <code class=\"language-text\">package.json</code> tersebut untuk memulai proses <em>deployment</em>. Direktori <em>public</em> hasil dari <em>build</em> tersebut akan di-<em>deploy</em> di GitHub Pages <em>repository</em> tepatnya pada <em>branch</em> <code class=\"language-text\">master</code>.</p>\n<blockquote>\n<p>PS: Ini sepertinya ketentuan dari GitHub. Jika ingin melakukan deployment untuk <em>project</em> berbasis selain Jekyll, maka <em>project</em> tersebut harus di-<em>deploy</em> di <em>branch</em> <code class=\"language-text\">master</code>, bukan di <em>branch</em> <code class=\"language-text\">gh-pages</code> layaknya <em>deployment</em> menggunakan Jekyll.</p>\n</blockquote>\n<p>Proses <em>deployment</em> yang berhasil ditandai dengan status <em>active</em> pada halaman <em>environment repository</em> serta halaman <em>repository setting</em> di Github yang menyatakan bahwa Github Pages telah ter-<em>publish</em> di <em>branch</em> <code class=\"language-text\">master</code>.</p>\n<p><figure class=\"figure\"><img src=\"https://i.imgur.com/zAZkIDY.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">Yay, deployment is active</figcaption></figure></p>\n<p><figure class=\"figure\"><img src=\"https://i.imgur.com/hTmDgTx.png\" class=\"figure-img img-fluid rounded\"><figcaption class=\"figure-caption\">Yay, site is published</figcaption></figure></p>\n<p>Sekian dari <em>post</em> ini. Mungkin nanti saya juga akan <em>update</em> secara berkala <em>post</em> ini untuk beberapa tambahan lainnya.</p>","frontmatter":{"title":"From Jekyll to GatsbyJS - Sebuah Review Singkat","date":"02 December 2019","tags":["review","jekyll","gatsbyjs"]},"fields":{"slug":"/blog/2019-12-02-From-Jekyll-to-GatsbyJS/","readingTime":{"text":"8 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2019-12-02-From-Jekyll-to-GatsbyJS/","previous":{"fields":{"slug":"/blog/2018-11-27-Github-Student-Pack/"},"frontmatter":{"title":"GitHub Student Pack - Layanan Free dengan Benefit Premium untuk Mahasiswa IT","tags":["github","tips and trick","review"]}},"next":{"fields":{"slug":"/blog/2019-12-27-Birthday-Reflection/"},"frontmatter":{"title":"Birthday Reflection - A New Hope","tags":["self writing"]}},"blog_prefix_page":"/blog"}}}