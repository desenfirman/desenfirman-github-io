{"version":3,"sources":["webpack:///./src/components/Layout/ContentLayout.js","webpack:///./src/components/SEO.js","webpack:///(webpack)/buildin/module.js","webpack:///./src/templates/blog-post.js"],"names":["ContentLayout","render","this","props","breadcrumb_items","children","md","lg","className","Component","SEO","title","description","image","pathname","article","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","googleAnalyticsTrackingId","seo","url","name","content","async","src","module","exports","webpackPolyfill","deprecate","paths","Object","defineProperty","enumerable","get","l","i","lodash","require","BlogPostTemplate","post","data","markdownRemark","disqus_shortname","disqusShortname","disqus_config","location","origin","fields","slug","identifier","frontmatter","pageContext","previous","next","link","excerpt","fluid","date","readingTime","text","dangerouslySetInnerHTML","__html","html","style","marginTop","tags","map","tag","to","prefix_page","kebabCase","display","flexWrap","justifyContent","listStyle","padding","rel","length","substring","shortname","config","React","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-f1de43b1fdbdc3885364.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport {CoreLayout as Layout} from './CoreLayout'\nimport SideBar from '../Sidebar'\nimport BreadcrumbNav from '../BreadcrumbNav'\nimport PageFooter from '../PageFooter'\n\n\nclass ContentLayout extends Component {\n    render() {\n        const {breadcrumb_items, children} = this.props\n        return (\n            <Layout>\n                <SideBar/>\n                <Container >\n                    <Row>\n                        <Col md={10} lg={8} className={'offset-md-1 offset-lg-2'}>\n                            <Container>\n                                <BreadcrumbNav breadcrumb_items={breadcrumb_items} />\n                                <Row>\n                                    {children}\n                                </Row>\n                            </Container>\n                        </Col>\n                    </Row>\n                </Container>\n\n                <PageFooter />\n\n            </Layout>\n        )\n    }\n}\n\nContentLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport { ContentLayout }","import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { graphql, StaticQuery } from 'gatsby';\n// import Twitter from './Twitter';\n// import Facebook from './Facebook';\n\nconst SEO = ({\n  title = null,\n  description = null,\n  image = null,\n  pathname = null,\n  article = false,\n}) => (\n  <StaticQuery\n    query={graphql`\n      query SEOQuery {\n        site {\n          siteMetadata {\n            defaultTitle: title\n            titleTemplate\n            defaultDescription: description\n            siteUrl: url\n            defaultImage: image\n            googleAnalyticsTrackingId\n          }\n        }\n      }\n    `}\n    render={({\n      site: {\n        siteMetadata: {\n          defaultTitle,\n          titleTemplate,\n          defaultDescription,\n          siteUrl,\n          defaultImage,\n          googleAnalyticsTrackingId\n        },\n      },\n    }) => {\n      const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${image || defaultImage}`,\n        url: `${siteUrl}${pathname || '/'}`,\n        googleAnalyticsTrackingId: googleAnalyticsTrackingId\n      };\n\n      return (\n        <>\n          <Helmet title={seo.title} titleTemplate={titleTemplate}>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            <script async src={`https://www.googletagmanager.com/gtag/js?id=` + googleAnalyticsTrackingId}></script>\n              \n              <script>\n                {`\n                  window.dataLayer = window.dataLayer || [];\n                  function gtag(){dataLayer.push(arguments);}\n                  gtag('js', new Date());\n                  gtag('config', '` + googleAnalyticsTrackingId + `');\n                `} \n              </script>\n          </Helmet>\n        </>\n      );\n    }}\n  />\n);\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nexport default SEO;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport { ContentLayout as Layout } from '../components/Layout/ContentLayout'\nimport SEO from '../components/SEO'\nimport { Container } from 'react-bootstrap'\nimport { HLine } from '../components/HLine'\nimport { DiscussionEmbed } from 'disqus-react';\nconst lodash = require('lodash')\n\n\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const disqus_shortname = this.props.data.site.siteMetadata.disqusShortname\n    const base_url = this.props.location.origin\n    // console.log(this.props.location)\n    const disqus_config = {\n      url: base_url + post.fields.slug,\n      identifier: post.fields.slug,\n      title: post.frontmatter.title,\n    }\n    const prefix_page = '/blog'\n    const { previous, next } = this.props.pageContext\n\n    \n\n    return (\n      <Layout breadcrumb_items={[\n        { link: prefix_page, name: 'Blog' },\n        { link: post.fields.slug, name: post.frontmatter.title },\n\n      ]}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.frontmatter.description || post.excerpt || 'nothinâ€™'}\n          // image={post.frontmatter.image.childImageSharp.sizes.src}\n          pathname={post.fields.slug}\n          article\n        />\n\n        <Container fluid={true}>\n          <main>\n            <p className={'time'}>Written on <time>{post.frontmatter.date}</time></p>\n            <p className={'rd-t'}>{post.fields.readingTime.text}</p>\n            <h1>{post.frontmatter.title}</h1>\n            <HLine />\n            {/* <TypographyStyle> */}\n              <article className={'text-body'} dangerouslySetInnerHTML={{ __html: post.html }} />\n            {/* </TypographyStyle> */}\n            <Container style={{marginTop: '4rem'}} fluid={true}>\n            {\n              post.frontmatter.tags.map(tag => {\n                return( <Link to={prefix_page + \"/tags/\" + lodash.kebabCase(tag)} className=\"badge badge-dark\">{tag}</Link>)\n              })\n            }\n            </Container>\n            <HLine />\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link className={\"btn btn-link\"} to={previous.fields.slug} rel=\"prev\">\n                    Â« { (previous.frontmatter.title.length < 25) ? previous.frontmatter.title : previous.frontmatter.title.substring(0, 25) + ' ...'}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link className={\"btn btn-link\"} to={next.fields.slug} rel=\"next\">\n                    { (next.frontmatter.title.length < 25) ? next.frontmatter.title : next.frontmatter.title.substring(0, 25) + ' ...'} Â»\n                            </Link>\n                )}\n              </li>\n            </ul>\n            <HLine />\n            <Container fluid={true}>\n              <DiscussionEmbed shortname={disqus_shortname} config={disqus_config} />\n            </Container>\n          </main>\n        </Container>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title,\n        disqusShortname\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"DD MMMM YYYY\")\n        tags\n      }\n      fields {\n        slug\n        readingTime{\n          text\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}